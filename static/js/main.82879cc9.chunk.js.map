{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","imageRef","useState","diceMatrix","setDiceMatrix","numDice","setNumDice","imageSource","setImageSource","dice","updateImage","canvas","current","image","height","naturalHeight","offsetHeight","width","naturalWidth","offsetWidth","getContext","drawImage","drawDice","context","pixelsPerDice","Math","floor","tempDiceMatrix","y","diceMatrixRow","x","data","getImageData","averageRGB","getAverageRGB","index","push","colourSum","count","i","length","r","g","b","dicePerRowEqualToTarget","updateDicePerRow","targetNumDice","tempNumDice","parseInt","toAdd","useEffect","formatNumber","num","toString","replace","diceCount","reduce","a","className","htmlFor","alt","ref","src","onLoad","type","id","accept","style","display","onChange","e","URL","createObjectURL","target","files","uploadImage","value","min","max","textAlign","toFixed","map","row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82879cc9.chunk.js","sourcesContent":["import './App.css';\n\nimport React, {\n  useRef,\n  useState,\n  useEffect\n} from 'react'\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n  const [diceMatrix, setDiceMatrix] = useState([]);\n  const [numDice, setNumDice] = useState(2);\n  const [imageSource, setImageSource] = useState(\"seinfeld.jpg\");\n\n  const dice = ['⚅', '⚄', '⚃', '⚂', '⚁', '⚀']\n\n  const updateImage = () => {\n    const canvas = canvasRef.current;\n    const image = imageRef.current;\n    canvas.height = image.naturalHeight || image.offsetHeight || image.height;\n    canvas.width = image.naturalWidth || image.offsetWidth || image.width;\n\n    canvas.getContext('2d').drawImage(image, 0, 0);\n  }\n\n  const drawDice = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const height = canvas.height;\n    const width = canvas.width;\n\n    if (width === 0) {\n      return;\n    }\n\n    const pixelsPerDice = Math.floor(width / numDice);\n\n    let tempDiceMatrix = []\n    for (let y = 0; y <= height - pixelsPerDice; y += pixelsPerDice) {\n      let diceMatrixRow = [];\n      for (let x = 0; x <= width - pixelsPerDice; x += pixelsPerDice) {\n        const data = context.getImageData(x, y, pixelsPerDice, pixelsPerDice).data;\n        const averageRGB = getAverageRGB(data);\n        const index = Math.floor(averageRGB / 43);\n        diceMatrixRow.push(dice[index]);\n      }\n      tempDiceMatrix.push(diceMatrixRow);\n    }\n    setDiceMatrix(tempDiceMatrix);\n  }\n\n  const getAverageRGB = data => {\n    let colourSum = 0;\n    let count = 0;\n    for (let i = 0; i < data.length; i += 4) {\n      count++;\n      let r = data[i];\n      let g = data[i + 1];\n      let b = data[i + 2];\n      colourSum += Math.floor((r + g + b) / 3);\n    }\n    return Math.floor(colourSum / count);\n  }\n\n  const dicePerRowEqualToTarget = (numDice, pixelsPerDice) => {\n    const dicePerRow = Math.floor(canvasRef.current.width / pixelsPerDice);\n    return dicePerRow === numDice;\n  }\n\n  const updateDicePerRow = targetNumDice => {\n    let tempNumDice = targetNumDice ? parseInt(targetNumDice) : 1;\n    const toAdd = tempNumDice > numDice ? 1 : -1;\n\n    if (canvasRef.current.width === 0) {\n      return;\n    }\n\n    let pixelsPerDice = Math.floor(canvasRef.current.width / tempNumDice);\n    while (!dicePerRowEqualToTarget(tempNumDice, pixelsPerDice)) {\n      tempNumDice += toAdd;\n      pixelsPerDice = pixelsPerDice = Math.floor(canvasRef.current.width / tempNumDice);\n    }\n\n    if (canvasRef.current.height < pixelsPerDice) {\n      tempNumDice += 1;\n    }\n\n    setNumDice(tempNumDice);\n  }\n\n  const handleImageChange = () => {\n    updateImage();\n    updateDicePerRow(1);\n    drawDice();\n  }\n\n  const refresh = () => {\n    updateImage();\n    drawDice();\n  }\n\n  useEffect(() => {\n    refresh();\n  }, [numDice])\n\n\n  const uploadImage = e => {\n    setImageSource(URL.createObjectURL(e.target.files[0]));\n  }\n\n  const formatNumber = num => {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n  }\n\n  const diceCount = diceMatrix.reduce((count, a) => count + a.length, 0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"intro\">\n        <p>Welcome to the dice art generator! Complete with price estimation in case you'd actually pay literally hundreds of pounds to put one of these monstrosities on your wall!</p>\n        <p>(Click the image to upload your own)</p>\n      <div className=\"input\">\n        <div className=\"image\">\n          <label htmlFor=\"image\">\n            <img\n              alt=\"whatever you uploaded\"\n              ref={imageRef}\n              height=\"100\"\n              src={imageSource}\n              onLoad={()=>handleImageChange()}/>\n          </label>\n          <input type=\"file\"\n            id=\"image\"\n            accept=\"image/jpeg, image/png\"\n            style={{display:\"none\"}}\n            onChange={e => uploadImage(e)} />\n        </div>\n        <div className=\"options\">\n          <div>\n            <label htmlFor=\"numDice\">Number of dice per row:</label>\n            <input\n              type=\"number\"\n              id=\"numDice\"\n              value={numDice}\n              onChange={(e) => updateDicePerRow(e.target.value)}\n              min=\"1\"\n              max=\"1000\"\n              style={{textAlign:\"right\"}} />\n          </div>\n         <div>\n           {diceMatrix[0] &&\n             <div>\n           <p>This image has {diceMatrix.length} rows of {diceMatrix[0].length} dice.</p>\n           <p>That's a total of {formatNumber(diceCount)} dice!</p>\n           <p>At 10p per dice, it'll cost ya £{formatNumber((diceCount*0.1).toFixed(2))}.</p></div>}\n         </div>\n        </div>\n      </div>\n      <canvas ref={canvasRef}  style={{display:\"none\"}} />\n    </div>\n    <div className=\"dice-holder\">\n    {  diceMatrix.map((row, i) => <div key={i}>{row}</div>) }\n    </div>\n  </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}