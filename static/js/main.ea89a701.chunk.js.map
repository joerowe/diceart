{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","canvasRef","useRef","imageRef","useState","diceMatrix","setDiceMatrix","numDice","setNumDice","dice","getAverageRGB","data","colourSum","count","i","length","r","g","b","Math","floor","numDiceValid","width","pixelsPerDice","dicePerRow","useEffect","canvas","current","context","getContext","image","height","naturalHeight","offsetHeight","naturalWidth","offsetWidth","drawImage","updateImage","tempDiceMatrix","y","diceMatrixRow","x","getImageData","averageRGB","index","push","drawDice","diceCount","reduce","a","className","htmlFor","alt","ref","src","type","id","accept","style","display","onChange","e","URL","createObjectURL","target","files","uploadImage","value","targetNumDice","tempNumDice","parseInt","toAdd","updateDicePerRow","min","max","textAlign","toFixed","map","row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea89a701.chunk.js","sourcesContent":["import './App.css';\n\nimport React, {\n  useRef,\n  useState,\n  useEffect\n} from 'react'\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n  const [diceMatrix, setDiceMatrix] = useState([]);\n  const [numDice, setNumDice] = useState(1);\n\n  const dice = ['⚅', '⚄', '⚃', '⚂', '⚁', '⚀']\n\n  const updateImage = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext && canvas.getContext('2d');\n    const image = imageRef.current;\n    canvas.height = image.naturalHeight || image.offsetHeight || image.height;\n    canvas.width = image.naturalWidth || image.offsetWidth || image.width;\n\n    context.drawImage(image, 0, 0);\n  }\n\n  const drawDice = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext && canvas.getContext('2d');\n    const height = canvas.height;\n    const width = canvas.width;\n\n    if (width === 0) {\n      return;\n    }\n\n    const pixelsPerDice = Math.floor(width / numDice);\n\n    let tempDiceMatrix = []\n    for (let y = 0; y < height; y += pixelsPerDice) {\n      let diceMatrixRow = [];\n      for (let x = 0; x < width; x += pixelsPerDice) {\n        const data = context.getImageData(x, y, pixelsPerDice, pixelsPerDice).data;\n        const averageRGB = getAverageRGB(data);\n        const index = Math.floor(averageRGB / 43);\n        diceMatrixRow.push(dice[index]);\n      }\n      tempDiceMatrix.push(diceMatrixRow);\n    }\n    setDiceMatrix(tempDiceMatrix);\n  }\n\n  const getAverageRGB = data => {\n    let colourSum = 0;\n    let count = 0;\n    for (let i = 0; i < data.length; i += 4) {\n      count++;\n      let r = data[i];\n      let g = data[i + 1];\n      let b = data[i + 2];\n      colourSum += Math.floor((r + g + b) / 3);\n    }\n    return Math.floor(colourSum / count);\n  }\n\n  const uploadImage = e => {\n    imageRef.current.src = URL.createObjectURL(e.target.files[0]);\n  }\n\n  const numDiceValid = (width, numDice) => {\n    const pixelsPerDice = Math.floor(width / numDice);\n    const dicePerRow = Math.floor(width / pixelsPerDice);\n    const totalPixelsCovered = pixelsPerDice * dicePerRow;\n\n    const fullImageCovered = totalPixelsCovered === width;\n    const diceEqualToTarget = dicePerRow === numDice;\n\n    return fullImageCovered && diceEqualToTarget;\n  }\n\n  const updateDicePerRow = targetNumDice => {\n\n    let tempNumDice = parseInt(targetNumDice);\n    const width = canvasRef.current.width;\n    const toAdd = tempNumDice > numDice ? 1 : -1;\n\n    if (width === 0) {\n      return;\n    }\n\n    while (!numDiceValid(width, tempNumDice)) {\n      tempNumDice += toAdd;\n    }\n\n    setNumDice(tempNumDice);\n  }\n\n  useEffect(() => {\n    updateImage();\n    drawDice();\n  }, [imageRef.current, numDice])\n\n  const diceCount = diceMatrix.reduce((count, a) => count + a.length, 0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"intro\">\n        <p>Welcome to the dice art generator! Complete with price estimation in case you'd actually pay literally hundreds of pounds to put one of these monstrosities on your wall!</p>\n        <p>(Click the image to upload your own)</p>\n      <div className=\"input\">\n        <div>\n          <label htmlFor=\"image\">\n            <img alt=\"whatever you uploaded\" ref={imageRef} height=\"100\" src=\"seinfeld.jpg\"/>\n          </label>\n          <input type=\"file\"\n            id=\"image\"\n            accept=\"image/jpeg, image/png\"\n            style={{display:\"none\"}}\n            onChange={e => uploadImage(e)} />\n        </div>\n        <div className=\"options\">\n          <div>\n            <label htmlFor=\"numDice\">Number of dice per row:</label>\n            <input\n              type=\"number\"\n              id=\"numDice\"\n              value={numDice}\n              onChange={(e) => updateDicePerRow(e.target.value)}\n              min=\"1\"\n              max=\"1000\"\n              style={{textAlign:\"right\"}} />\n          </div>\n         <div>\n           <p>This image takes {diceCount} dice to create!</p>\n           <p>At 10p per dice, it'll cost ya £{(diceCount*0.1).toFixed(2)}.</p>\n         </div>\n        </div>\n      </div>\n        <canvas ref={canvasRef}  style={{display:\"none\"}} />\n      </div>\n      <div className=\"dice-holder\">\n      {  diceMatrix.map((row, i) => <div key={i}>{row}</div>) }\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}